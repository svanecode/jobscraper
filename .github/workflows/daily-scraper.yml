name: Daily Job Validator, Scraper and AI Scorer

on:
  schedule:
    # Run daily at 5:00 AM Danish time (CET/CEST)
    # This is 3:00 AM UTC in winter (CET) and 4:00 AM UTC in summer (CEST)
    # Using 3:00 AM UTC to ensure it runs at 5:00 AM Danish time year-round
    - cron: '0 3 * * *'
  workflow_dispatch:  # Allow manual triggering

jobs:
  validate-scrape-score:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install Playwright
      run: |
        python -m pip install --upgrade pip
        pip install playwright
        playwright install chromium
        
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        # Install OpenAI for AI scoring
        pip install openai
        
    - name: Check environment setup
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "Checking environment variables..."
        if [ -z "$SUPABASE_URL" ]; then
          echo "Warning: SUPABASE_URL is not set"
        else
          echo "SUPABASE_URL is configured"
        fi
        if [ -z "$SUPABASE_ANON_KEY" ]; then
          echo "Warning: SUPABASE_ANON_KEY is not set"
        else
          echo "SUPABASE_ANON_KEY is configured"
        fi
        if [ -z "$OPENAI_API_KEY" ]; then
          echo "Warning: OPENAI_API_KEY is not set (required for AI scoring)"
        else
          echo "OPENAI_API_KEY is configured"
        fi
        
    - name: Run job validator (oldest jobs first)
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      run: |
        echo "Starting GitHub Actions V2 job validation with fallback strategies..."
        python job_validator_github_actions_v2.py
        echo "Job validation completed successfully"
        
    - name: Check validator results
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      run: |
        echo "Checking validator results..."
        python -c "
        from job_validator_github_actions_v2 import GitHubActionsJobValidatorV2
        validator = GitHubActionsJobValidatorV2()
        stats = validator.get_deletion_stats()
        print(f'Validator Results: {stats}')
        "
        
    - name: Run scraper
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      run: |
        echo "Starting Jobindex scraper..."
        python playwright_scraper.py
        echo "Scraper completed successfully"
        

        
    - name: Run AI job scorer
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "Starting AI job scoring..."
        python job_scorer.py
        echo "AI job scoring completed successfully"
        
    - name: Upload artifacts (if any)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: scraper-results
        path: |
          *.json
          *.csv
        retention-days: 7
        
    - name: Send notification on success
      if: success()
      run: |
        echo "‚úÖ Daily job validation, scraping and AI scoring completed successfully!"
        echo "üìä Expired jobs cleaned up, new jobs scraped, and jobs scored for CFO services"
        
    - name: Send notification on failure
      if: failure()
      run: |
        echo "‚ùå Daily job validation, scraping and AI scoring failed!"
        echo "Please check the logs for details" 