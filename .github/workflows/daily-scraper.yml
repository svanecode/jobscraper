name: Daily Jobindex Scraper

on:
  schedule:
    - cron: '0 4 * * *'
  
  workflow_dispatch:
    inputs:
      max_pages:
        description: 'Maximum pages to scrape'
        required: false
        default: '50'
        type: string
      start_page:
        description: 'Page to start from'
        required: false
        default: '1'
        type: string

jobs:
  scrape-jobs:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg ca-certificates procps libxss1
        
    - name: Install Playwright
      run: |
        python -m pip install --upgrade pip
        pip install playwright
        playwright install chromium --with-deps
        
    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt
        
    - name: Test ChromaDB connection
      run: |
        python -c "
        from chromadb import HttpClient
        client = HttpClient(
            ssl=True,
            host='${{ secrets.CHROMA_HOST }}',
            tenant='${{ secrets.CHROMA_TENANT }}',
            database='${{ secrets.CHROMA_DATABASE }}',
            headers={'x-chroma-token': '${{ secrets.CHROMA_API_KEY }}'}
        )
        print('âœ… ChromaDB connection successful')
        "
        
    - name: Run scraper
      id: scraper
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        CHROMA_HOST: ${{ secrets.CHROMA_HOST }}
        CHROMA_TENANT: ${{ secrets.CHROMA_TENANT }}
        CHROMA_DATABASE: ${{ secrets.CHROMA_DATABASE }}
        CHROMA_API_KEY: ${{ secrets.CHROMA_API_KEY }}
      run: |
        python jobindex_scraper.py --scrape --max-pages ${{ github.event.inputs.max_pages || '50' }} --start-page ${{ github.event.inputs.start_page || '1' }}
        echo "success=true" >> $GITHUB_OUTPUT
        
    - name: Upload logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: scraper-logs
        path: |
          jobindex_scraper.log
          *.log
        retention-days: 30
        
    - name: Upload scraper output
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: scraper-output
        path: |
          *.json
          *.csv
        retention-days: 30
        
    - name: Create summary
      if: always()
      run: |
        echo "## Scraping Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** ${{ steps.scraper.outputs.success }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Max Pages:** ${{ github.event.inputs.max_pages || '50' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Start Page:** ${{ github.event.inputs.start_page || '1' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Jobs stored in ChromaDB:** Yes" >> $GITHUB_STEP_SUMMARY 