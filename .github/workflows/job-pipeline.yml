name: Job Pipeline (Scrape, Cleanup, Info, Score & Vector Refresh)

on:
  workflow_dispatch:  # Allow manual triggering
  schedule:
    # GitHub cron uses UTC. This runs daily at 03:00 UTC
    # ‚âà 05:00 CEST (summer) and 04:00 CET (winter) in Denmark
    - cron: '0 3 * * *'

jobs:
  scrape-cleanup-and-score:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    concurrency:
      group: job-pipeline
      cancel-in-progress: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies and browsers
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        playwright install --with-deps chromium
        
    - name: Check environment setup
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        OPENAI_VECTOR_STORE_ID: ${{ secrets.OPENAI_VECTOR_STORE_ID }}
      run: |
        echo "Checking environment variables..."
        if [ -z "$SUPABASE_URL" ]; then
          echo "Warning: SUPABASE_URL is not set"
        else
          echo "SUPABASE_URL is configured"
        fi
        if [ -z "$SUPABASE_SERVICE_ROLE_KEY" ]; then
          echo "Warning: SUPABASE_SERVICE_ROLE_KEY is not set (required for RLS)"
        else
          echo "SUPABASE_SERVICE_ROLE_KEY is configured"
        fi
        if [ -z "$OPENAI_API_KEY" ]; then
          echo "Warning: OPENAI_API_KEY is not set (required for AI scoring)"
        else
          echo "OPENAI_API_KEY is configured"
        fi
        if [ -z "$OPENAI_VECTOR_STORE_ID" ]; then
          echo "Warning: OPENAI_VECTOR_STORE_ID is not set (required for vector refresh)"
        else
          echo "OPENAI_VECTOR_STORE_ID is configured"
        fi
        
    - name: Run scraper and cleanup
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      run: |
        echo "Starting combined job scraper and cleanup..."
        python job_scraper_and_cleanup.py
        echo "Combined scraper and cleanup completed successfully"
        
    - name: Run job info scraper
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      run: |
        echo "Starting job info scraper to fill missing company information..."
        python job_info_scraper.py
        echo "Job info scraper completed successfully"

    - name: Run AI job scorer
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "Starting AI job scoring..."
        python job_scorer.py
        echo "AI job scoring completed successfully"
        
    - name: Refresh OpenAI vector store
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        OPENAI_VECTOR_STORE_ID: ${{ secrets.OPENAI_VECTOR_STORE_ID }}
      run: |
        echo "Starting vector store refresh..."
        python openai_vectorstore_refresh.py
        echo "Vector store refresh completed successfully"
        
    - name: Send notification on success
      if: success()
      run: |
        echo "‚úÖ Job pipeline completed successfully!"
        echo "üìä Jobs scraped, cleaned up, info filled, scored, and vector store refreshed for CFO services"
        
    - name: Send notification on failure
      if: failure()
      run: |
        echo "‚ùå Job pipeline failed!"
        echo "Please check the logs for details" 

  backfill-job-regions:
    name: Backfill job regions (GPT-5)
    needs: scrape-cleanup-and-score
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run location‚Üíregion backfill (GPT-5)
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          JOBS_REGION_IS_ARRAY: 'true'
          MODEL_NAME: 'gpt-5'
          FALLBACK_MODEL_NAME: 'gpt-5-thinking'
          STRICT_GPT5: 'true'
        run: |
          echo "Starting location_to_region backfill with GPT-5..."
          python location_to_region.py
          echo "Region backfill finished."