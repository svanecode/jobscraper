name: Job Pipeline (Scrape, Cleanup, Info & Score)

on:
  workflow_dispatch:  # Allow manual triggering
  schedule:
    # Run daily at 5:00 AM Danish time (CET/CEST)
    # This is 3:00 AM UTC in winter (CET) and 4:00 AM UTC in summer (CEST)
    - cron: '0 3 * * *'

jobs:
  scrape-cleanup-and-score:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install Playwright
      run: |
        python -m pip install --upgrade pip
        pip install playwright
        playwright install chromium
        
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        # Install OpenAI for AI scoring
        pip install openai
        
    - name: Check environment setup
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "Checking environment variables..."
        if [ -z "$SUPABASE_URL" ]; then
          echo "Warning: SUPABASE_URL is not set"
        else
          echo "SUPABASE_URL is configured"
        fi
        if [ -z "$SUPABASE_SERVICE_ROLE_KEY" ]; then
          echo "Warning: SUPABASE_SERVICE_ROLE_KEY is not set (required for RLS)"
        else
          echo "SUPABASE_SERVICE_ROLE_KEY is configured"
        fi
        if [ -z "$SUPABASE_ANON_KEY" ]; then
          echo "Warning: SUPABASE_ANON_KEY is not set"
        else
          echo "SUPABASE_ANON_KEY is configured"
        fi
        if [ -z "$OPENAI_API_KEY" ]; then
          echo "Warning: OPENAI_API_KEY is not set (required for AI scoring)"
        else
          echo "OPENAI_API_KEY is configured"
        fi
        
    - name: Run scraper and cleanup
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      run: |
        echo "Starting combined job scraper and cleanup..."
        python job_scraper_and_cleanup.py
        echo "Combined scraper and cleanup completed successfully"
        
    - name: Run job info scraper
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      run: |
        echo "Starting job info scraper to fill missing company information..."
        python job_info_scraper.py
        echo "Job info scraper completed successfully"
        
    - name: Run AI job scorer
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "Starting AI job scoring..."
        python job_scorer.py
        echo "AI job scoring completed successfully"
        
    - name: Upload artifacts (if any)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pipeline-results
        path: |
          *.json
          *.csv
        retention-days: 7
        
    - name: Send notification on success
      if: success()
      run: |
        echo "‚úÖ Job pipeline completed successfully!"
        echo "üìä Jobs scraped, cleaned up, info filled, and scored for CFO services"
        
    - name: Send notification on failure
      if: failure()
      run: |
        echo "‚ùå Job pipeline failed!"
        echo "Please check the logs for details" 