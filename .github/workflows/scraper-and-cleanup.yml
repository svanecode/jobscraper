name: Job Scraper and Cleanup

on:
  workflow_dispatch:  # Allow manual triggering
  schedule:
    # Run daily at 5:00 AM Danish time (CET/CEST)
    # This is 3:00 AM UTC in winter (CET) and 4:00 AM UTC in summer (CEST)
    - cron: '0 3 * * *'

jobs:
  scrape-and-cleanup:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install Playwright
      run: |
        python -m pip install --upgrade pip
        pip install playwright
        playwright install chromium
        
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        
    - name: Install GitHub CLI
      run: |
        type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
        && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
        && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
        && sudo apt update \
        && sudo apt install gh -y
        
    - name: Check environment setup
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      run: |
        echo "Checking environment variables..."
        if [ -z "$SUPABASE_URL" ]; then
          echo "Warning: SUPABASE_URL is not set"
        else
          echo "SUPABASE_URL is configured"
        fi
        if [ -z "$SUPABASE_ANON_KEY" ]; then
          echo "Warning: SUPABASE_ANON_KEY is not set"
        else
          echo "SUPABASE_ANON_KEY is configured"
        fi
        
    - name: Verify AI job scorer workflow exists
      run: |
        echo "Verifying AI job scorer workflow configuration..."
        if [ -f ".github/workflows/ai-job-scorer.yml" ]; then
          echo "‚úÖ AI job scorer workflow file exists"
          
          # Check if it listens for the correct event type
          if grep -q "start-ai-scorer" .github/workflows/ai-job-scorer.yml; then
            echo "‚úÖ AI job scorer workflow is configured to listen for 'start-ai-scorer' event"
          else
            echo "‚ùå AI job scorer workflow is NOT configured to listen for 'start-ai-scorer' event"
          fi
        else
          echo "‚ùå AI job scorer workflow file does not exist"
        fi
        
    - name: Run scraper and cleanup
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      run: |
        echo "Starting combined job scraper and cleanup..."
        python job_scraper_and_cleanup.py
        echo "Combined scraper and cleanup completed successfully"
        
    - name: Trigger AI job scorer
      if: success()
      run: |
        echo "Triggering AI job scorer workflow..."
        echo "Repository: ${{ github.repository }}"
        echo "Event type: start-ai-scorer"
        
        # Try using GitHub CLI first (more reliable)
        if command -v gh &> /dev/null; then
          echo "Using GitHub CLI to trigger workflow..."
          gh workflow run ai-job-scorer.yml
          if [ $? -eq 0 ]; then
            echo "‚úÖ AI job scorer workflow triggered successfully via GitHub CLI"
            exit 0
          else
            echo "‚ùå GitHub CLI failed, trying curl method..."
          fi
        fi
        
        # Fallback to curl method
        # Use PAT_TOKEN if available, otherwise fall back to GITHUB_TOKEN
        TOKEN="${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}"
        
        response=$(curl -X POST \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token $TOKEN" \
          https://api.github.com/repos/${{ github.repository }}/dispatches \
          -d '{"event_type":"start-ai-scorer"}' \
          -w "\nHTTP Status: %{http_code}\n")
        
        echo "Response: $response"
        
        if [[ $response == *"HTTP Status: 204"* ]]; then
          echo "‚úÖ AI job scorer workflow triggered successfully"
        else
          echo "‚ùå Failed to trigger AI job scorer workflow"
          echo "Response: $response"
          echo "Note: If using GITHUB_TOKEN, you may need to create a Personal Access Token with 'repo' scope"
        fi
        
    - name: Send notification on success
      if: success()
      run: |
        echo "‚úÖ Combined scraper and cleanup completed successfully!"
        echo "üìä New jobs scraped and old jobs cleaned up"
        
    - name: Send notification on failure
      if: failure()
      run: |
        echo "‚ùå Combined scraper and cleanup failed!"
        echo "Please check the logs for details" 